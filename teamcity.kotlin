package id4dmobile_4dIOSSdk_Main.buildTypes

import jetbrains.buildServer.configs.kotlin.v2019_2.*

object id4dmobile_4dIOSSdk_Build : BuildType({
    id = AbsoluteId("id4dmobile_4dIOSSdk_Build")
    name = "Build"
    description = "Build  framework and cache it"

    allowExternalStatus = true
    artifactRules = """
        %SDK_NAME%.zip
        %SDK_NAME%.src.zip
        %SDK_NAME%.zip.md5
        %SDK_NAME%.src.zip.md5
        Cartfile.resolved
        LICENSES.md
        sdkVersion
        build.log
    """.trimIndent()

    params {
        param("CARTHAGE_BUILD_OPTIONS", "--cache-builds --no-use-binaries")
        param("CARTHAGE_CHECKOUT_OPTIONS", "")
        param("CARTHAGE_OPTIONS", "--no-use-binaries --cache-builds")
    }

    vcs {
        root(AbsoluteId("id4dmobile_4DMobile"))
        root(AbsoluteId("id4dmobile_4dIOSSdk_QMobileAPI"), "+:.=>QMobileAPI")
        root(AbsoluteId("id4dmobile_4dIOSSdk_QMobileDataStore"), "+:.=>QMobileDataStore")
        root(AbsoluteId("id4dmobile_4dIOSSdk_QMobileDataSync"), "+:.=>QMobileDataSync")
        root(AbsoluteId("id4dmobile_4dIOSSdk_QMobileUI"), "+:.=>QMobileUI")
        root(AbsoluteId("id4dmobile_BuildChainScript"))

        cleanCheckout = true
        checkoutDir = "%BRANCH%/SDK/"
    }

    steps {
        script {
            name = "Nuke Carthage Cache"
            scriptContent = "rm -rf ~/Library/Caches/org.carthage.CarthageKit"
        }
        script {
            name = "Ignore Cartfile.resolved, get last"
            enabled = false
            scriptContent = """[ -f "Cartfile.resolved" ] && rm "Cartfile.resolved""""
        }
        script {
            name = "Carthage head QMobile fix"
            scriptContent = """
                echo "Edit cartfile with last QMobile hash"
                
                # url=%GIT_FUSION%/%GIT_GROUP%/
                url=%GIT_TEST%/%GIT_GROUP%/
                file=Cartfile.resolved
                
                echo "${'$'}url"
                
                echo "- before:"
                cat ${'$'}file
                
                # remove QMobile from file
                sed -i '' '/QMobile/d' ${'$'}file
                
                for f in *; do
                    if [[ -d ${'$'}f ]]; then
                      if [[ ${'$'}f == QMobile* ]]; then
                          #hash=`git -C ${'$'}f rev-parse HEAD`
                          echo ${'$'}f
                          hash=`git ls-remote ${'$'}url${'$'}f.git %GIT_BRANCH% | awk '{ print ${'$'}1}'`
                          echo ${'$'}hash
                          line="git \"${'$'}url${'$'}f.git\" \"${'$'}hash\""
                
                          echo "${'$'}line" >> "${'$'}file"
                      fi
                    fi
                done
                echo "- after:"
                cat ${'$'}file
            """.trimIndent()
        }
        script {
            name = "Rome download (cache with rome)"
            scriptContent = "rome download --platform %CARTHAGE_PLATFORM%"
        }
        script {
            name = "Carthage checkout"
            scriptContent = """
                # checkout
                carthage checkout %CARTHAGE_CHECKOUT_OPTIONS%
            """.trimIndent()
        }
        script {
            name = "Carthage fix Cartfile"
            scriptContent = """
                # Remove Reactivate extension from Moya
                echo "Remove Reactivate extension from Moya"
                
                ## Sources
                rm -Rf Carthage/Checkouts/Reactive*
                rm -Rf Carthage/Checkouts/Rx*
                
                ## Build artifact
                rm -Rf Carthage/Build/Reactive*
                rm -Rf Carthage/Build/Rx*
                
                ## Build scheme
                rm -Rf Carthage/Checkouts/Moya/Moya.xcodeproj/xcshareddata/xcschemes/Reactive*
                rm -Rf Carthage/Checkouts/Moya/Moya.xcodeproj/xcshareddata/xcschemes/Rx*
                
                ## In Cartfile (mandatory or carthage will try to compile or resolve dependencies)
                sed -i '' '/Reactive/d' Cartfile.resolved
                sed -i '' '/Rx/d' Cartfile.resolved
                
                sed -i '' '/Reactive/d' Carthage/Checkouts/Moya/Cartfile.resolved
                sed -i '' '/Rx/d' Carthage/Checkouts/Moya/Cartfile.resolved
                
                sed -i '' '/Reactive/d' Carthage/Checkouts/Moya/Cartfile
                sed -i '' '/Rx/d' Carthage/Checkouts/Moya/Cartfile
                
                # use last version of alamofire if 4.7.3
                sed -i.bak 's/4.7.3/4.8.0/' Carthage/Checkouts/Moya/Cartfile.resolved
                
                # # # # # # # # # # # # # # 
                # Edit cartfile of QMobile project with git server 
                echo "Edit cartfile of QMobile project with git server url %GIT_TEST%"
                
                if [ "%GIT_FUSION%" = "%GIT_TEST%" ]; then
                  echo "No url to update"
                  exit 0
                fi
                
                cd Carthage/Checkouts
                for f in *; do
                    if [[ -d ${'$'}f ]]; then
                      if [[ ${'$'}f == QMobile* ]]; then
                        echo "${'$'}f: "
                        # replace server url
                        echo " - server url in carfile"
                        sed -i '' 's,%GIT_FUSION%,%GIT_TEST%,g' ${'$'}f/Cartfile.resolved
                        sed -i '' 's,%GIT_FUSION%,%GIT_TEST%,g' ${'$'}f/Cartfile
                        # remove workspace if project exist (avoid compile dependencies and have some umbrella issues)
                        if [[ -d ${'$'}f/${'$'}f.xcworkspace ]]; then
                          echo "- remove xcworkspace"
                          rm -Rf ${'$'}f/${'$'}f.xcworkspace
                        fi
                      fi
                    fi
                done
            """.trimIndent()
        }
        script {
            name = "Patch moya dependencies"
            scriptContent = """
                patchfile=${'$'}(pwd)/moyapatch.diff
                
                cat ${'$'}patchfile
                
                cd Carthage/Checkouts/Moya/
                
                if [ -f "${'$'}patchfile" ]; then
                    patch -p1 -i "${'$'}patchfile"
                    
                    cat Moya.xcodeproj/project.pbxproj | grep "Alamofire"
                else
                    echo "path ${'$'}patchfile do not exist"
                fi
            """.trimIndent()
        }
        script {
            name = "Carthage build"
            scriptContent = """
                # https://github.com/Carthage/Carthage/blob/master/Documentation/StaticFrameworks.md
                
                #if [ -f "%CARTHAGE_LD%" ]; then
                  #echo "Static frameworks using ld.py"
                  #xcconfig=${'$'}(mktemp /tmp/static.xcconfig.XXXXXX)
                  #trap 'rm -f "${'$'}xcconfig"' INT TERM HUP EXIT
                
                  #echo "LD = %CARTHAGE_LD%" >> ${'$'}xcconfig
                  #echo "DEBUG_INFORMATION_FORMAT = dwarf" >> ${'$'}xcconfig
                
                  #export XCODE_XCCONFIG_FILE="${'$'}xcconfig"
                #fi
                
                #xcconfig=${'$'}(mktemp /tmp/static.xcconfig.XXXXXX)
                #echo 'BUILD_LIBRARY_FOR_DISTRIBUTION=YES'>${'$'}xcconfig
                #export XCODE_XCCONFIG_FILE=${'$'}xcconfig
                
                # Build
                carthage build %CARTHAGE_BUILD_OPTIONS% --platform %CARTHAGE_PLATFORM% --log-path "%CARTHAGE_LOG_PATH%"
                code=${'$'}? # or maybe log in other script
                
                #rm ${'$'}xcconfig
                
                # Pretty log
                if [ -f "%CARTHAGE_LOG_PATH%" ]; then
                  if [ -x "${'$'}(command -v xcpretty)" ]; then
                    cat "%CARTHAGE_LOG_PATH%" | xcpretty
                  else
                    echo 'xcpretty not installed'
                  fi
                else
                  echo "no log file"
                fi
                
                # exist with build result
                exit ${'$'}code
            """.trimIndent()
        }
        script {
            name = "Rome upload (cache with rome)"
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE
            scriptContent = "rome upload --platform %CARTHAGE_PLATFORM%"
        }
        script {
            name = "Strip archs"
            scriptContent = "./sdkstriparch.sh"
        }
        script {
            name = "LICENSES"
            scriptContent = "swift acknowledge.swift"
        }
        script {
            name = "Clean example, docs"
            scriptContent = """
                cd Carthage/Checkouts/
                
                # tests
                rm -Rf ZIPFoundation/Tests/ZIPFoundationTests/Resources
                
                # demo
                rm -Rf IBAnimatable/IBAnimatableApp
                rm -Rf Kingfisher/Demo
                rm -Rf SwiftMessages/Demo
                rm -Rf XCGLogger/DemoApps
                rm -Rf Eureka/Example
                rm -Rf DeviceKit/Example
                rm -Rf Alamofire/Example
                rm -Rf SwiftyJSON/Example
                rm -Rf Prephirences/Example
                rm -Rf Moya/Examples
                rm -Rf CallbackURLKit/SampleApp
                rm -Rf SwiftMessages/iMessageDemo
                
                # docs
                rm -Rf Guitar/docs
                rm -Rf Kingfisher/docs
                rm -Rf IBAnimatable/Documentation
                rm -Rf Alamofire/Documentation
                rm -Rf Alamofire/docs
                rm -Rf Moya/docs
                rm -Rf Moya/docs_CN
                rm -Rf Eureka/Documentation
                rm -Rf BrightFutures/Documentation
                
                # resources
                rm -Rf SwiftMessages/Design
                rm -Rf Moya/Tests/testImage.png
                rm -Rf Kingfisher/images
                rm -Rf Eureka/*.png
                rm -Rf Eureka/*.jpg
                rm -Rf Moya/web
                rm -Rf XCGLogger/ReadMeImages
                rm -Rf Prephirences/Xcodes/Mac/*.gif
            """.trimIndent()
        }
        script {
            name = "Version file"
            scriptContent = """
                echo "Create version file"
                file=sdkVersion
                
                function git_current_branch() {
                  local ref
                  ref=${'$'}(command git symbolic-ref --quiet HEAD 2> /dev/null)
                  local ret=${'$'}?
                  if [[ ${'$'}ret != 0 ]]; then
                    [[ ${'$'}ret == 128 ]] && return  # no git repo.
                    ref=${'$'}(command git rev-parse --short HEAD 2> /dev/null) || return
                  fi
                  echo ${'$'}{ref#refs/heads/}
                }
                branch=${'$'}(git_current_branch)
                buildNumber=%build.number%
                newBuildNumber=${'$'}buildNumber
                for f in *; do
                    if [[ -d ${'$'}f ]]; then
                      if [[ ${'$'}f == QMobile* ]]; then
                          hash=`git -C ${'$'}f rev-parse --short HEAD`
                          newBuildNumber=${'$'}newBuildNumber"."${'$'}hash
                
                          bundleVersion=${'$'}branch"@"${'$'}buildNumber"."${'$'}hash
                          bundleShortVersion=${'$'}hash
                   
                          infoPlist="Carthage/Build/iOS/"${'$'}f".framework/Info.plist"
                          echo "Edit versions for ${'$'}infoPlist"
                          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${'$'}bundleVersion" "${'$'}infoPlist"
                          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${'$'}bundleShortVersion" "${'$'}infoPlist"
                      fi
                    fi
                done
                
                sdkHash=${'$'}branch"@"${'$'}newBuildNumber
                echo ${'$'}sdkHash
                echo ${'$'}sdkHash > ${'$'}file
                
                # transmit to team city
                echo "##teamcity[buildNumber '${'$'}newBuildNumber']"
            """.trimIndent()
        }
        script {
            name = "SignApp symbols"
            scriptContent = """./sdksign.sh "%CERTIFICATE_NAME%" "%GIT_PROJECT_NAME%.entitlements""""
        }
        step {
            name = "SignApp"
            type = "id4dmobile_SignApp"
            enabled = false
            param("ENTITLEMENTS", "%GIT_PROJECT_NAME%.entitlements")
            param("CERTIFICATE_NAME", "%CERTIFICATE_NAME%")
            param("FILE_PATH", "Carthage/Build/iOS")
        }
        script {
            name = "CheckSign"
            scriptContent = """
                nameCertificat="%CERTIFICATE_NAME%"
                Entitlements="%GIT_PROJECT_NAME%.entitlements"
                frameworks_folder="Carthage/Build/iOS"
                
                # echo "strip arch "${'$'}arch
                for framework in ${'$'}frameworks_folder/*
                do
                    if [[ -d ${'$'}framework ]]; then
                      filename=${'$'}(basename "${'$'}framework")
                      name="${'$'}{filename%.*}"
                      extension="${'$'}{framework##*.}"
                
                      if [[ ${'$'}extension = "framework" ]]; then
                	    # Sign symbol
                        file_path=${'$'}framework".dSYM/Contents/Resources/DWARF/${'$'}name"
                        if [ -f "${'$'}file_path" ]; then
                            codesign -vdd "${'$'}file_path"
                        fi
                        
                	# Sign framework
                        file_path="${'$'}framework"
                        codesign -vdd "${'$'}file_path"
                    fi
                  fi
                done
            """.trimIndent()
        }
        script {
            name = "Zip SDK with Source"
            scriptContent = """
                skdName=%SDK_NAME%
                
                zipName="${'$'}skdName.src.zip"
                if [ -f ${'$'}zipName ]; then
                  rm -f ${'$'}zipName
                fi
                zip -q -r -y ${'$'}zipName Package.swift Carthage/ Cartfile Cartfile.resolved sdkVersion LICENSES.md -x "__MACOSX"
            """.trimIndent()
        }
        script {
            name = "md5 with source"
            scriptContent = """
                skdName=%SDK_NAME%
                md5 ${'$'}skdName.src.zip > ${'$'}skdName.src.zip.md5
            """.trimIndent()
        }
        script {
            name = "Zip SDK"
            scriptContent = """
                skdName=%SDK_NAME%
                
                zipName="${'$'}skdName.zip"
                if [ -f ${'$'}zipName ]; then
                  rm -f ${'$'}zipName
                fi
                
                mv Package.swift Package.private.swift
                
                # zip -r -q -y ${'$'}zipName sdkVersion Package.private.swift Carthage/Build Cartfile.resolved LICENSES.md Carthage/Checkouts/ -x Carthage/Checkouts/QMobile\*
                # to preserve signature, use ditto instead of zip https://blog.jjgod.org/2013/06/21/preserving-extended-attributes-on-os-x/
                prepare="prepare"
                rm -Rf ${'$'}prepare/Carthage
                mkdir -p ${'$'}prepare/Carthage
                cp -r Carthage/Build ${'$'}prepare/Carthage/Build
                cp -Ra Carthage/Checkouts ${'$'}prepare/Carthage/Checkouts
                rm -Rf ${'$'}prepare/Carthage/Checkouts/QMobile*
                cp Package.private.swift sdkVersion LICENSES.md Cartfile.resolved ${'$'}prepare/
                
                ditto -ck --sequesterRsrc ${'$'}prepare/ ${'$'}zipName
            """.trimIndent()
        }
        script {
            name = "md5"
            scriptContent = """
                skdName=%SDK_NAME%
                md5 ${'$'}skdName.zip > ${'$'}skdName.zip.md5
            """.trimIndent()
        }
        script {
            name = "Check if last hash in resolved file"
            scriptContent = """
                function echoerr {
                    echo -e "\033[31m${'$'}1\033[0m" 1>&2
                }
                file=Cartfile.resolved
                carthagepath=~/Library/Caches/org.carthage.CarthageKit/dependencies/
                
                for f in *; do
                    if [[ -d ${'$'}f ]]; then
                      if [[ ${'$'}f == QMobile* ]]; then
                          hash=`git -C ${'$'}f rev-parse HEAD`
                
                          resolvedline=`cat ${'$'}file | grep ${'$'}f`
                          if [[ ${'$'}resolvedline == *"${'$'}hash"* ]]; then
                            echo "${'$'}f;${'$'}hash;ok last hash"
                          else
                            echoerr "${'$'}f;${'$'}hash;${'$'}resolvedline"
                          fi
                      fi
                    fi
                done
                
                for f in *; do
                    if [[ -d ${'$'}f ]]; then
                      if [[ ${'$'}f == QMobile* ]]; then
                          hash=`git -C ${'$'}f rev-parse HEAD`
                          cachehash=`git -C ${'$'}carthagepath${'$'}f rev-parse HEAD`
                          if [[ ${'$'}cachehash == ${'$'}hash ]]; then
                            echo "${'$'}f;${'$'}hash;ok last hash in cache"
                          else
                            echoerr "${'$'}f;${'$'}hash;${'$'}cachehash"
                          fi
                      fi
                    fi
                done
            """.trimIndent()
        }
    }

    triggers {
        vcs {
            quietPeriodMode = VcsTrigger.QuietPeriodMode.USE_CUSTOM
            quietPeriod = 1024
            branchFilter = ""
        }
    }

    failureConditions {
        errorMessage = true
        failOnMetricChange {
            metric = BuildFailureOnMetric.MetricType.ARTIFACT_SIZE
            units = BuildFailureOnMetric.MetricUnit.DEFAULT_UNIT
            comparison = BuildFailureOnMetric.MetricComparison.LESS
            compareTo = build {
                buildRule = lastSuccessful()
            }
            param("metricThreshold", "50MB")
        }
    }
})
